rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isVerified() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }
    
    function isTeacher(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.isTeacher == true;
    }
    
    function isActiveUser() {
      return isVerified() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status == 'active';
    }

    // Subjects collection (needed for lessons page)
    match /subjects/{subjectId} {
      allow read: if true;
    }

    // Categories collection (needed for navigation)
    match /categories/{categoryId} {
      allow read: if true;
    }

    // Lessons collection
    match /lessons/{lessonId} {
      // Anyone can read lessons and their subcollections
      allow read: if true;
      
      // Only verified teachers can create lessons
      allow create: if isVerified() && 
        isTeacher(request.auth.uid) && 
        request.resource.data.teacherId == request.auth.uid;
      
      // Teachers can update their own lessons, students can update bookedTimes
      allow update: if isVerified() && (
        // Teacher updating their own lesson
        (request.resource.data.teacherId == request.auth.uid) ||
        // Student booking a time slot
        (resource.data.teacherId != request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['bookedTimes']))
      );
      
      // Teachers can delete their own lessons
      allow delete: if isVerified() && 
        resource.data.teacherId == request.auth.uid;

      // Allow read access to any subcollections of lessons
      match /{document=**} {
        allow read: if true;
      }
    }

    // Users collection
    match /users/{userId} {
      // Public profiles are readable
      allow read: if true;
      
      // Users can only create/update their own profile
      allow create: if isAuthenticated() && 
        request.auth.uid == userId;
      
      allow update: if isAuthenticated() && 
        request.auth.uid == userId;

      // Bookings subcollection
      match /bookings/{bookingId} {
        // Authenticated users can read bookings
        allow read: if isAuthenticated();
        
        // Allow write if user is verified and either:
        // 1. Writing to their own bookings
        // 2. Is the teacher for this booking
        // 3. Creating a new booking
        allow write: if isVerified() && (
          request.auth.uid == userId ||
          resource == null ||
          request.resource.data.teacherId == request.auth.uid
        );
      }
    }

    // Give read access to all collections and documents
    match /{document=**} {
      // Anyone can read
      allow read: if true;
      
      // Only verified users can write
      allow write: if isVerified();
    }
  }
} 